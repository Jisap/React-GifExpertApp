{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAoB9C,OAEI,sBAAMC,SAdW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAGtCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAtBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,aA4B/BZ,EAAYe,UAAY,CACpBd,c,OAAee,EAAUC,KAAKC,Y,mCCrCrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,sEAILC,EAJK,iDAI2CC,UAAUH,GAJrD,+DAKQI,MAAMF,GALd,cAKLG,EALK,gBAMYA,EAAKC,OANjB,uBAMHC,EANG,EAMHA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAX/B,kBAiBJM,GAjBI,kCAqBXO,QAAQC,IAAR,MArBW,0DAAH,sDCCPC,EAAc,SAAC,GAA0B,IAAvBN,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAItC,OAFAa,QAAQC,IAAIL,EAAIC,EAAOV,GAGnB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,4BAAKA,QCJJS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAa,MAEZlB,mBAAS,CAE/ByB,KAAK,GACLe,SAAS,IALyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAqBtC,OAZAC,qBAAW,WACP1B,EAAQC,GACH0B,MAAK,SAAAC,GACFH,EAAS,CACTjB,KAAMoB,EACNL,SAAS,SAInB,CAACtB,IAGIuB,EDjBiBK,CAAa5B,GAA9BO,EAF8B,EAE9BA,KAAMe,EAFwB,EAExBA,QAGb,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAoDlB,IAElDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAGgBX,EAAKE,KAAK,SAAAC,GAAG,OACT,aADwB,CACvB,EAAD,eAESA,GADCA,EAAIC,aEhB7BkB,EAAe,WAAM,MAGM/C,mBAAS,CAAC,aAHhB,mBAGvBgD,EAHuB,KAGXjD,EAHW,KAU9B,OAEI,cADA,CACA,sBACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQiD,EAAWrB,KAAK,SAAAT,GAAQ,OAChB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCnBtC+B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.476d583f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => { //Recibimos la props setCategories del GifExpertApp\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n    \r\n    const handleInputChange = (e) => {  //Esta función establece el valor del input y lo guarda en el hook inputValue\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cats => [inputValue, ...cats]);       //Como no podemos traernos el hook categories pero si su setCategories\r\n                                                                //utilizamos esta función donde lo que venga de setCategories será mapeado\r\n                                                                //y a esto le añadimos lo que se ponga en el input\r\n            setinputValue('');\r\n        }                                                       \r\n\r\n    }                                                       \r\n                                                            \r\n    return (\r\n        \r\n        <form onSubmit={handleSubmit}>          \r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}              //Valor del input\r\n                onChange={ handleInputChange}   //Se dispara un evento cuando cambia el input\r\n            />\r\n        </form>                  \r\n        \r\n    )\r\n}\r\n\r\nAddCategory.prototype = {                       //Donde voy a usar una prop puedo establecer \r\n    setCategories: PropTypes.func.isRequired    //que sea requerido\r\n}\r\n","\r\nexport const getGifs = async( category ) => {\r\n\r\n        try{\r\n\r\n            const url =`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=mEJajYAkrA8rijbYc4hR6mEUxKHEg9pc`;\r\n            const resp = await fetch(url);  //Petición al server\r\n            const { data } = await resp.json(); //Desestructuramos data de resp y convertimos a json\r\n            const gifs = data.map(img =>{   //Mapeamos data y de cada imagen sacamos lo siguiente\r\n                return{\r\n                    id: img.id,\r\n                    title: img.title,\r\n                    url: img.images?.downsized_medium.url //?->Si viene toda la información se utilizará\r\n                }\r\n            })\r\n            // console.log(gifs);\r\n            // setimages(gifs);// Guardamos en images la respuesta con los gifs\r\n            \r\n            return gifs;//Esto es una promesa\r\n\r\n        }catch(error){\r\n\r\n            console.log(error);\r\n        }\r\n\r\n        \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {//De cada imagen desestructuro lo que me hace falta\r\n\r\n    console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState,useEffect } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n//import { getGifs } from '../helpers/getGifs';//Importamos getGifs\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {  // Recibimos la prop desde GifExpertApp\r\n\r\n    const {data, loading} = useFetchGifs(category); // Nos traemos el custom hook desestructurando su contenido\r\n                                                    // y le enviamos la category \r\n  \r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n        { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n        <div className=\"card-grid\">\r\n            \r\n                    {                       \r\n                        data.map( img => (          //Mapeamos data y obtenemos los gifs independientes(img)\r\n                            <GifGridItem            //Se envián al componente gifGridItem\r\n                                key={ img.id }\r\n                                { ...img }\r\n                            />    \r\n                        ))\r\n                    }\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {     //Hook personaalizado\r\n\r\n    const [state, setstate] = useState({\r\n        \r\n        data:[],            //Estado inicial del hook\r\n        loading: true\r\n    \r\n    });\r\n\r\n    useEffect( ()=> {\r\n        getGifs(category)                   //Al ser una promesa cuando se resuelve actualizamos\r\n            .then(imgs => {                 //el estado de data con todas las imagenes que contiene gifs\r\n                setstate({                   \r\n                data: imgs,\r\n                loading: false\r\n            });\r\n    })\r\n\r\n    },[category]);                          //Al poner el segundo argumento [] solo se llamará getGifs                                     \r\n                                            //si alguno de los elementos de la lista cambia\r\n\r\n    return state; //data[], loading:true\r\n\r\n\r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['OnePunch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['OnePunch']);//Hook categories, definimos un estado para categorias\r\n\r\n    // const handleAdd = () => {\r\n    //     setCategories([...categories,'HunterXHunter']);     //Así hay que añadir elementos a un estado\r\n    //                 //(cats => [...cats, 'HunterXHunter])   //Otra forma  \r\n    // }\r\n\r\n    return (\r\n        //Enviamos al componente AddCategory la función del hook categories, setCategories\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr></hr>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => ( \r\n                            <GifGrid \r\n                                key={ category }\r\n                                category={ category } \r\n                            />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n\r\n    \r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}